[build-system]
requires = ["poetry-core>=1.8.2"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "spads"
version = "0.1.0"
description = "Investigating research gaps with Single-Photon LIDARs"
authors = ["rohitbnrj <rohitbnrj@gmail.com>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/your/project"
repository = "https://github.com/your/project"
keywords = [
    "single-photon-lidar",
    "computer-vision",
    "Diffusion Inpainting",
    "correspondence-matching",
]
classifiers = [
    "Development Status :: 1 - Planning",
    "Intended Audience :: Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Computer Vision",
    "Topic :: Scientific/Engineering :: Computational Image Processing",
]
packages = [{ include = "spads" }]

[tool.poetry.dependencies]
python = ">=3.12, <3.13"
opencv-python = ">=4.12.0.88"
imageio = ">=2.37.0"
loguru = "^0.7.3"
einops = "^0.8.1"
hydra-core = "^1.3.2"
tyro = "^0.9.26"
hydra-config = "^0.0.15"
pydantic = "^2.11.7"
scipy = "^1.16.2"
einsum = "^0.3.0"
tqdm = "^4.67.1"
diffusers = "^0.35.1"
transformers = "^4.56.1"
accelerate = "^1.10.1"
protobuf = "^6.32.1"
sentencepiece = "^0.2.1"


[tool.poetry.dev-dependencies]
ruff = "^0.12.4"
pre-commit = "^4.2.0"
pytest = ">=8.4.1"


[tool.poetry.scripts]
main = "spads.main:main"

[tool.ruff]

# Exclude a variety of commonly ignored directories
exclude = [
    ".vscode",
    ".git",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    ".ipynb_checkpoints",
    ".tox",
    "venv",
]

# Same as Black
line-length = 88
indent-width = 4

# Python Version
target-version = "py312"


[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`) codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"
# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"


# [tool.pytest.ini_options]
# testpaths = ["tests"]
# python_files = "test_*.py"
# python_classes = "Test*"
# python_functions = "test_*"
# addopts = [
#     "-v",
#     "--strict-markers",
#     "--strict-config",
#     "--cov=spads",
#     "--cov-report=term-missing",
#     "--cov-report=html",
# ]

# # Coverage configuration
# [tool.coverage.run]
# source = ["spads"]
# omit = [
#     "*/tests/*",
#     "*/test_*.py",
# ]

# [tool.coverage.report]
# exclude_lines = [
#     "pragma: no cover",
#     "def __repr__",
#     "raise AssertionError",
#     "raise NotImplementedError",
#     "if __name__ == .__main__.:",
# ]
